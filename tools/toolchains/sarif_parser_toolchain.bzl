"Setup sarif_parser toolchain repositories and rules"

load("//tools:integrity.bzl", "RELEASED_BINARY_INTEGRITY")
load("//tools:version.bzl", "VERSION")

SARIF_PARSER_PLATFORMS = {
    "darwin_amd64": struct(
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "darwin_arm64": struct(
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "freebsd_amd64": struct(
        compatible_with = [
            "@platforms//os:freebsd",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_amd64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_arm64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_s390x": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:s390x",
        ],
    ),
    "windows_amd64": struct(
        compatible_with = [
            "@platforms//os:windows",
            "@platforms//cpu:x86_64",
        ],
    ),
}

SarifParserInfo = provider(
    doc = "Provide info for executing sarif_parser",
    fields = {
        "bin": "Executable sarif_parser binary",
    },
)

def _sarif_parser_toolchain_impl(ctx):
    binary = ctx.file.bin

    default_info = DefaultInfo(
        files = depset([binary]),
        runfiles = ctx.runfiles(files = [binary]),
    )
    sarif_parser_info = SarifParserInfo(
        bin = binary,
    )

    toolchain_info = platform_common.ToolchainInfo(
        sarif_parser_info = sarif_parser_info,
        default = default_info,
    )

    return [default_info, toolchain_info]

sarif_parser_toolchain = rule(
    implementation = _sarif_parser_toolchain_impl,
    attrs = {
        "bin": attr.label(
            mandatory = True,
            allow_single_file = True,
            executable = True,
            cfg = "exec",
        ),
    },
)

def _sarif_parser_toolchains_repo_impl(rctx):
    build_content = """# @generated by @aspect_rules_lint//tools/toolchains:sarif_parser_toolchain.bzl
#
# These can be registered in the MODULE.bazel file or passed to --extra_toolchains flag.
# By default all these toolchains are registered by the sarif_parser_register_toolchains macro
# so you don't normally need to interact with these targets.
"""

    for [platform, meta] in SARIF_PARSER_PLATFORMS.items():
        build_content += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:sarif_parser_toolchain",
    toolchain_type = "@aspect_rules_lint//tools/toolchains:sarif_parser_toolchain_type",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

sarif_parser_toolchains_repo = repository_rule(
    _sarif_parser_toolchains_repo_impl,
    doc = "Creates a repository with toolchain definitions for all known platforms which can be registered or selected.",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)

def _sarif_parser_platform_repo_impl(rctx):
    is_windows = rctx.attr.platform.startswith("windows_")
    meta = SARIF_PARSER_PLATFORMS[rctx.attr.platform]
    release_platform = meta.release_platform if hasattr(meta, "release_platform") else rctx.attr.platform
    release_file = "sarif_parser-{}{}".format(release_platform, ".exe" if is_windows else "")

    url = "https://github.com/aspect-build/rules_lint/releases/download/v{}/{}".format(
        VERSION,
        release_file,
    )

    rctx.download(
        url = url,
        output = "sarif_parser.exe" if is_windows else "sarif_parser",
        executable = True,
        sha256 = RELEASED_BINARY_INTEGRITY[release_file],
    )
    build_content = """# @generated by @aspect_rules_lint//tools/toolchains:sarif_parser_toolchain.bzl
load("@aspect_rules_lint//tools/toolchains:sarif_parser_toolchain.bzl", "sarif_parser_toolchain")
exports_files(["{0}"])
sarif_parser_toolchain(name = "sarif_parser_toolchain", bin = "{0}", visibility = ["//visibility:public"])
""".format("sarif_parser.exe" if is_windows else "sarif_parser")

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

sarif_parser_platform_repo = repository_rule(
    implementation = _sarif_parser_platform_repo_impl,
    doc = "Fetch external tools needed for sarif_parser toolchain",
    attrs = {
        "platform": attr.string(mandatory = True, values = SARIF_PARSER_PLATFORMS.keys()),
    },
)
