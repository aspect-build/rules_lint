load("@aspect_bazel_lib//lib:utils.bzl", bazel_lib_utils = "utils")
load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("//lint/private:lint_aspect.bzl", "lint_options")

package(default_visibility = ["//visibility:public"])

exports_files(glob(["*.bzl"]) + ["lint_test.sh"])

# Used as a default for vale_aspect#styles
filegroup(
    name = "empty_styles",
    srcs = [],
)

_BAZEL_TOOLS = [
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "@bazel_tools//tools/build_defs/repo:utils.bzl",
] + (
    ["@bazel_tools//tools/build_defs/repo:cache.bzl"] if bazel_lib_utils.is_bazel_7_or_greater() else []
)

config_setting(
    name = "linux_x86",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    visibility = ["//visibility:private"],
)

config_setting(
    name = "linux_aarch64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
    visibility = ["//visibility:private"],
)

bool_flag(
    name = "debug",
    build_setting_default = False,
)

config_setting(
    name = "debug.enabled",
    flag_values = {":debug": "true"},
)

bool_flag(
    name = "fail_on_violation",
    build_setting_default = False,
)

config_setting(
    name = "fail_on_violation.enabled",
    flag_values = {":fail_on_violation": "true"},
)

bool_flag(
    name = "fix",
    build_setting_default = False,
)

config_setting(
    name = "fix.enabled",
    flag_values = {":fix": "true"},
)

bool_flag(
    name = "color",
    build_setting_default = True,
)

config_setting(
    name = "color.enabled",
    flag_values = {":color": "true"},
)

lint_options(
    name = "options",
    color = select({
        ":color.enabled": True,
        "//conditions:default": False,
    }),
    debug = select({
        ":debug.enabled": True,
        "//conditions:default": False,
    }),
    fail_on_violation = select({
        ":fail_on_violation.enabled": True,
        "//conditions:default": False,
    }),
    fix = select({
        ":fix.enabled": True,
        "//conditions:default": False,
    }),
)

bzl_library(
    name = "buf",
    srcs = ["buf.bzl"],
    deps = [
        "//lint/private:lint_aspect",
        "@rules_proto//proto:defs",
    ],
)

# Aliases introduced in #432 for fear of breaking users.
# TODO(2.0) remove them
alias(
    name = "eslint.workaround_17660",
    actual = "//lint/js:eslint.workaround_17660",
)

alias(
    name = "eslint.compact-formatter",
    actual = "//lint/js:eslint.compact-formatter",
)

alias(
    name = "eslint.stylish-formatter",
    actual = "//lint/js:eslint.stylish-formatter",
)

alias(
    name = "stylelint.compact-formatter",
    actual = "//lint/js:stylelint.compact-formatter",
)

bzl_library(
    name = "eslint",
    srcs = ["eslint.bzl"],
    deps = [
        "//lint/private:lint_aspect",
        "@aspect_bazel_lib//lib:copy_to_bin",
        "@aspect_rules_js//js:libs",
    ],
)

bzl_library(
    name = "lint_test",
    srcs = ["lint_test.bzl"],  # keep
    deps = ["@aspect_bazel_lib//lib:paths"],
)

bzl_library(
    name = "flake8",
    srcs = ["flake8.bzl"],
    deps = ["//lint/private:lint_aspect"],
)

bzl_library(
    name = "keep_sorted",
    srcs = ["keep_sorted.bzl"],
    deps = ["//lint/private:lint_aspect"],
)

bzl_library(
    name = "pmd",
    srcs = ["pmd.bzl"],
    deps = _BAZEL_TOOLS + [
        "//lint/private:lint_aspect",
    ],
)

bzl_library(
    name = "checkstyle",
    srcs = ["checkstyle.bzl"],
    deps = _BAZEL_TOOLS + [
        "//lint/private:lint_aspect",
    ],
)

bzl_library(
    name = "spotbugs",
    srcs = ["spotbugs.bzl"],
    deps = _BAZEL_TOOLS + [
        "//lint/private:lint_aspect",
    ],
)

bzl_library(
    name = "ruff",
    srcs = ["ruff.bzl"],
    deps = _BAZEL_TOOLS + [
        ":ruff_versions",
        "//lint/private:lint_aspect",
        "@bazel_skylib//lib:versions",
    ],
)

bzl_library(
    name = "shellcheck",
    srcs = ["shellcheck.bzl"],
    deps = ["//lint/private:lint_aspect"],
)

bzl_library(
    name = "stylelint",
    srcs = ["stylelint.bzl"],
    deps = [
        "//lint/private:lint_aspect",
        "@aspect_bazel_lib//lib:copy_to_bin",
        "@aspect_rules_js//js:libs",
    ],
)

bzl_library(
    name = "ruff_versions",
    srcs = ["ruff_versions.bzl"],
)

bzl_library(
    name = "vale",
    srcs = ["vale.bzl"],
    deps = _BAZEL_TOOLS + [
        ":vale_library",
        ":vale_versions",
        "//lint/private:lint_aspect",
    ],
)

bzl_library(
    name = "vale_versions",
    srcs = ["vale_versions.bzl"],
)

bzl_library(
    name = "vale_library",
    srcs = ["vale_library.bzl"],
    deps = _BAZEL_TOOLS,
)

bzl_library(
    name = "ktlint",
    srcs = ["ktlint.bzl"],
    deps = _BAZEL_TOOLS + [
        "//lint/private:lint_aspect",
        "@bazel_skylib//lib:dicts",
    ],
)

bzl_library(
    name = "clang_tidy",
    srcs = ["clang_tidy.bzl"],
    deps = _BAZEL_TOOLS + [
        "//lint/private:lint_aspect",
        "@bazel_skylib//lib:dicts",
        "@bazel_tools//tools/build_defs/cc:action_names.bzl",
        "@bazel_tools//tools/cpp:toolchain_utils.bzl",
    ],
)

sh_binary(
    name = "clang_tidy_wrapper",
    srcs = ["clang_tidy_wrapper.bash"],
)
