"""Definition of the formatter binary

This is in its own package because it has so many loading-time symbols,
we don't want to trigger eager fetches of these for builds that don't want to run format.
"""

load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@aspect_rules_lint//lint:vale_library.bzl", "VALE_STYLES")
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load("@npm//:eslint/package_json.bzl", eslint_bin = "bin")
load("@npm//:stylelint/package_json.bzl", stylelint_bin = "bin")
load("@rules_java//java:defs.bzl", "java_binary")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")

package(default_visibility = ["//:__subpackages__"])

alias(
    name = "buf",
    actual = "@rules_buf_toolchains//:buf",
)

# We can test that it works with:
# bazel run :flake8 -- --help
py_console_script_binary(
    name = "flake8",
    pkg = "@pip//flake8:pkg",
)

py_console_script_binary(
    name = "pylint",
    pkg = "@pip//pylint:pkg",
)

py_console_script_binary(
    name = "yamllint",
    pkg = "@pip//yamllint:pkg",
)

eslint_bin.eslint_binary(name = "eslint")

stylelint_bin.stylelint_binary(name = "stylelint")

java_binary(
    name = "pmd",
    # In PMD 6.x, this was the main class:
    # main_class = "net.sourceforge.pmd.PMD",
    # It changed in version 7.0
    # https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_userdocs_migrating_to_pmd7.html
    main_class = "net.sourceforge.pmd.cli.PmdCli",
    runtime_deps = ["@net_sourceforge_pmd"],
)

java_binary(
    name = "checkstyle",
    main_class = "com.puppycrawl.tools.checkstyle.Main",
    runtime_deps = ["@com_puppycrawl_tools_checkstyle//jar"],
)

java_binary(
    name = "spotbugs",
    jvm_flags = [
        "--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ],
    main_class = "edu.umd.cs.findbugs.LaunchAppropriateUI",
    runtime_deps = [
        "@spotbugs//:jar",
    ],
)

native_binary(
    name = "vale",
    src = select(
        {
            "@bazel_tools//src/conditions:linux_x86_64": "@vale_Linux_64-bit//:vale",
            "@bazel_tools//src/conditions:linux_aarch64": "@vale_Linux_arm64//:vale",
            "@bazel_tools//src/conditions:darwin_x86_64": "@vale_macOS_64-bit//:vale",
            "@bazel_tools//src/conditions:darwin_arm64": "@vale_macOS_arm64//:vale",
            "@bazel_tools//src/conditions:windows_x64": "@vale_Windows_64-bit//:vale.exe",
        },
    ),
    out = "vale",
)

copy_to_directory(
    name = "vale_styles",
    srcs = [
        "@vale_{0}//:{0}".format(s)
        for s in VALE_STYLES
        # Restrict to subset like Google and write-good to avoid GHA cache getting huge and exhausting disk.
        # Comment this out to test that our code to fetch them is working.
        # Most users should just copy in the styles that are referenced in their .vale.ini file.
        if "oo" in s
    ],
    include_external_repositories = ["vale_*"],
)

native_binary(
    name = "clang_tidy",
    src = select(
        {
            "@bazel_tools//src/conditions:linux_x86_64": "@llvm_toolchain_llvm//:bin/clang-tidy",
            "@bazel_tools//src/conditions:linux_aarch64": "@llvm_toolchain_llvm//:bin/clang-tidy",
            "@bazel_tools//src/conditions:darwin_x86_64": "@llvm_toolchain_llvm//:bin/clang-tidy",
            "@bazel_tools//src/conditions:darwin_arm64": "@llvm_toolchain_llvm//:bin/clang-tidy",
            # llvm_toolchain doesn't support windows: https://github.com/bazel-contrib/toolchains_llvm/issues/4
            # as a workaround, you can download exes from
            # https://github.com/llvm/llvm-project/releases/tag/llvmorg-18.1.6 and make available locally.
            "@bazel_tools//src/conditions:windows_x64": "clang-tidy.exe",
        },
    ),
    out = "clang_tidy",
)
