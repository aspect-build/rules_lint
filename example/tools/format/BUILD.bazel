"""BUILD definition for the formatter binary

This is in its own package because it has so many loading-time symbols,
we don't want to trigger eager fetches of these for builds that don't want to run format.
"""

load("@aspect_rules_lint//format:defs.bzl", "format_multirun", "format_test")
load("@npm//:prettier/package_json.bzl", prettier = "bin")
load("@rules_java//java:defs.bzl", "java_binary")

package(default_visibility = ["//:__subpackages__"])

prettier.prettier_binary(
    name = "prettier",
    # Include this js_library and its dependencies in the runfiles (runtime dependencies)
    data = ["//:prettierrc"],
    # Allow the binary to be run outside bazel
    env = {"BAZEL_BINDIR": "."},
    fixed_args = [
        # `require` statements in the config file will be resolved relative to its location
        # Therefore to make it hermetic, prettier must be pointed at the copy of the config file
        # in the runfiles folder rather than the one in the source folder.
        "--config=\"$$JS_BINARY__RUNFILES\"/$(rlocationpath //:prettierrc)",
        # default log level is "log" which spams on success
        # https://prettier.io/docs/en/cli.html#--log-level
        # NB: prettier 2 names this loglevel, in prettier 3 it's renamed log-level, see
        # https://prettier.io/blog/2023/07/05/3.0.0.html#cli-1
        "--loglevel=warn",
    ],
)

java_binary(
    name = "java-format",
    jvm_flags = [
        "--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ],
    main_class = "com.google.googlejavaformat.java.Main",
    runtime_deps = ["@google-java-format//jar"],
)

java_binary(
    name = "ktfmt",
    main_class = "com.facebook.ktfmt.cli.Main",
    runtime_deps = ["@ktfmt//jar"],
)

alias(
    name = "swiftformat",
    actual = select({
        "@bazel_tools//src/conditions:linux": "@swiftformat",
        "@bazel_tools//src/conditions:darwin": "@swiftformat_mac",
    }),
)

java_binary(
    name = "scalafmt",
    data = ["//:.scalafmt.conf"],
    main_class = "org.scalafmt.cli.Cli",
    runtime_deps = ["@maven//:org_scalameta_scalafmt_cli_2_13"],
)

format_multirun(
    name = "format",
    c = "@llvm_toolchain_llvm//:bin/clang-format",
    cc = "@llvm_toolchain_llvm//:bin/clang-format",
    css = ":prettier",
    cuda = "@llvm_toolchain_llvm//:bin/clang-format",
    gherkin = ":prettier",
    # You can use standard gofmt instead of stricter gofumpt:
    # go = "@go_sdk//:bin/gofmt",
    go = "@aspect_rules_lint//format:gofumpt",
    graphql = ":prettier",
    html = ":prettier",
    java = ":java-format",
    javascript = ":prettier",
    jsonnet = "@aspect_rules_lint//format:jsonnetfmt",
    kotlin = ":ktfmt",
    markdown = ":prettier",
    protocol_buffer = "//tools/lint:buf",
    python = "@aspect_rules_lint//format:ruff",
    # Note, older rules_rust versions may need
    # @rules_rust//tools/rustfmt:upstream_rustfmt
    # which was later deprecated in
    # https://github.com/bazelbuild/rules_rust/pull/2703
    rust = "@rules_rust//tools/upstream_wrapper:rustfmt",
    scala = ":scalafmt",
    shell = "@aspect_rules_lint//format:shfmt",
    sql = ":prettier",
    starlark = "@buildifier_prebuilt//:buildifier",
    swift = ":swiftformat",
    terraform = "@aspect_rules_lint//format:terraform",
    visibility = ["//:__subpackages__"],
    xml = ":prettier",
    yaml = "@aspect_rules_lint//format:yamlfmt",
)

format_test(
    name = "format_test",
    size = "small",
    # FIXME: not hermetic, requires libncurses installed on the machine even when non-interactive
    # cc = "@llvm_toolchain_llvm//:bin/clang-format",
    # FIXME: something is not hermetic about this java_binary, on CI we see
    # error: com/sun/source/tree/Tree
    # java.lang.NoClassDefFoundError: com/sun/source/tree/Tree
    # java = ":java-format",
    javascript = ":prettier",
    # FIXME: something is not hermetic about this binary, on CI we see
    # java.lang.ClassNotFoundException: javax.swing.text.html.HTMLEditorKit$ParserCallback
    # kotlin = ":ktfmt",
    markdown = ":prettier",
    no_sandbox = True,  # Enables formatting the entire workspace, paired with 'workspace' attribute
    protocol_buffer = "//tools/lint:buf",
    python = "@aspect_rules_lint//format:ruff",
    scala = ":scalafmt",
    sql = ":prettier",
    starlark = "@buildifier_prebuilt//:buildifier",
    # FIXME: not hermetic: error while loading shared libraries: libFoundation.so
    # swift = ":swiftformat",
    workspace = "//:.shellcheckrc",  # A file in the workspace root, where the no_sandbox mode will run the formatter
)

format_test(
    name = "format_js_test",
    srcs = [
        "(special_char)/[square]/hello.ts",
    ],
    javascript = ":prettier",
)
